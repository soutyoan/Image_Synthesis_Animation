#version 430 core

layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;

uniform sampler2D colorTexture;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform float lightIntensity;
uniform vec3 lightPosition;
uniform float shininess;
uniform float eta;
uniform vec3 bbmin;
uniform vec3 bbmax;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;
uniform int pixelSize;
uniform int shift_x;
uniform int shift_y;
uniform int indices_alternance[9];
uniform int take_indices; // Number of indices to take from indices_alternance
uniform int maxBounds; // Number of maximal bounded rays

#define EPS                 0.001
#define M_PI 3.1415926535897932384626433832795


struct hitinfo_t {
    vec4 t;
    int hit_vptr;
};

struct intersectionItem {
    vec4 origin;
    vec4 dir;
    vec4 point_hit;
    vec4 normal;
    vec4 color;
};

float max3 (vec3 v) {
  return max (max (v.x, v.y), v.z);
}

float min3 (vec3 v) {
  return min (min (v.x, v.y), v.z);
}

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

bool intersectBoundingBox(vec4 origin, vec4 dir) {
	vec3 tmin = (origin.xyz - bbmin.xyz) / dir.xyz;
    vec3 tmax = (origin.xyz - bbmax.xyz) / dir.xyz;

    float in_val = max3(vec3(min(tmin.x, tmax.x), min(tmin.y, tmax.y), min(tmin.z, tmax.z)));
    float out_val = min3(vec3(max(tmin.x, tmax.x), max(tmin.y, tmax.y), max(tmin.z, tmax.z)));
    return out_val > in_val;
}

bool intersectPlane(vec4 origin, vec4 dir, out vec4 dist)
{
    vec4 Q = vec4(0, -groundDistance, 0, 1);
    vec4 normal_plane = vec4(0, 1, 0, 0);
    float lambda_plane = 0.0;
    if (dot(dir, normal_plane)!=0) {
        float lambda_plane = dot((Q - origin).xyz, normal_plane.xyz) / dot(normalize(dir).xyz, normal_plane.xyz);
        if (lambda_plane >= EPS) {
            vec3 planePoint = origin.xyz + lambda_plane * dir.xyz;
            if (length(center  - planePoint) <= 4.5*radius) {
                dist.xyz = planePoint - center;
                dist.w = lambda_plane;
                return true;
            }
        }
    }
    return false;
}

bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist)
{
	vec3 V0 = vertices[indices[ptr]].xyz;
    vec3 V1 = vertices[indices[ptr + 1]].xyz;
    vec3 V2 = vertices[indices[ptr + 2]].xyz;
    vec3 e1 = V1 - V0;
    vec3 e2 = V2 - V0;
    vec3 t = origin.xyz - V0;
    vec3 u = normalize(dir.xyz);
    vec3 p = cross(dir.xyz, e2);
    vec3 q = cross(t, e1);
    if (dot(p, e1) == 0) {
        return false;
    } else {
        vec3 sol = 1 / (dot(p, e1)) * vec3(dot(q, e2), dot(p, t), dot(q, u));
        float lambda = sol[0];
        if (lambda <= EPS) {
            return false;
        }
        float alpha = sol[1];
        if (alpha<-EPS || alpha>1+EPS) {
            return false;
        }
        float beta = sol[2];
        if (beta<-EPS || beta>1+EPS) {
            return false;
        }
        if ((1 - alpha - beta)<-EPS || (1-alpha-beta)>1+EPS) {
            return false;
        }
        dist[0] = alpha;
        dist[1] = beta;
        dist[2] = 1 - alpha - beta;
        dist[3] = lambda;
        return true;
        }
}

vec4 interpolateNormal(hitinfo_t h)
{
	if (h.hit_vptr == -1) {
        return vec4(0, 1, 0, 0);
        }
        else if (h.hit_vptr >= 0) {
        vec4 n0 = normals[indices[h.hit_vptr]];
        vec4 n1 = normals[indices[h.hit_vptr+1]];
        vec4 n2 = normals[indices[h.hit_vptr+2]];
        return normalize(h.t.x * n1 + h.t.y * n2 + h.t.z * n0);
    }
    return vec4(1);
}

vec4 interpolateColor(hitinfo_t h)
{
    if (h.hit_vptr == -1) {
        //return vec4(0.2, 0.6, 0.7, 1);
        vec2 textPlaneCoords = vec2(cos(h.t.x/(4.5*radius)), sin(h.t.z/(4.5*radius)));
        return texture2D(colorTexture, 0.5+0.5*textPlaneCoords);
    }
	else if (h.hit_vptr>=0) {
        vec4 c0 = colors[indices[h.hit_vptr]];
        vec4 c1 = colors[indices[h.hit_vptr+1]];
        vec4 c2 = colors[indices[h.hit_vptr+2]];
        return h.t.x * c1 + h.t.y * c2 + h.t.z * c0;
    }
	return vec4(0, 1, 0, 1);
}


bool isIntersected(vec4 origin, vec4 dir, out hitinfo_t h)
{
    vec4 dist; // stores barycentric coord + lambda distance
    h.t.w = 10000;
    vec4 dist_plane; // store points coordinates + lambda value for plane
	bool hit = intersectPlane(origin, dir, dist_plane);
    if (hit) {
        h.t = dist_plane;
        h.hit_vptr = -1;
    }

    // check the intersection with plane
	if(intersectBoundingBox(origin, dir)) {
		for(int j = 0; j < indices.length(); j += 3) {
			if(intersectTriangle(origin, dir, j, dist)) {
                hit = true;
                if (h.t.w > dist.w) {
                    h.t = dist;
                    h.hit_vptr = j;
                }
            }
		}
	}
	return hit;
}

const int MAX_TRACE = 1;

float cos_angle(vec4 vectA, vec4 vectB)
{
    return dot(normalize(vectA), normalize(vectB));
}

float F( float cos_theta )
{
    float inv_eta = eta;
    if ((pow(inv_eta, 2) - (1 - pow(cos_theta, 2))) < 0) {
        return 1.0;
    }
    float ci = sqrt(pow(inv_eta, 2) - (1 - pow(cos_theta, 2)));
    float Fs = pow(abs((cos_theta - ci) / (cos_theta + ci)), 2);
    float Fp = pow(abs((pow(inv_eta, 2) * cos_theta - ci) / (pow(inv_eta, 2) * cos_theta + ci)), 2);

    return (Fs + Fp) / 2;
}

vec4 phongModel(vec4 vertLight, vec4 vertNormal, vec4 vertEye, vec4 vertColor, float lightIntensity, bool only_ambiant) {
    // Assuming that the following vectors are already normalized :
    // vertLight, vertNormal, vertEye
    float ka = 0.2;
    vec4 Ca = ka * lightIntensity * vertColor;
    if (only_ambiant) {
        return Ca;
    }

    float kd = 0.5;
    vec4 Cd = kd * lightIntensity * vertColor * max(dot(vertNormal, -vertLight), 0);

    vec4 halfVector = normalize(vertEye - vertLight);
    float cos_theta_d = cos_angle(halfVector, -vertLight);
    vec4 Cs =  F(cos_theta_d) * lightIntensity * pow(max(dot(vertNormal, halfVector), 0), shininess) * vertColor;

    return Ca + Cd + Cs;
}


vec4 trace(vec4 origin, vec4 dir)
{
    hitinfo_t h;
    intersectionItem intersections[20]; // the maximal number of bounded rays
    int nb_bounds = 0;
    vec4 current_origin = vec4(origin.xyzw);
    vec4 current_dir = vec4(dir.xyzw);
    vec4 result = vec4(0,0,0,1);
    // hit either the plane or a triangle
    while (nb_bounds <= maxBounds && isIntersected(current_origin, current_dir, h)) {
        intersections[nb_bounds].origin = vec4(current_origin);
        current_origin += h.t.w * current_dir;
        intersections[nb_bounds].point_hit = vec4(current_origin);
        intersections[nb_bounds].normal = interpolateNormal(h);
        intersections[nb_bounds].color = interpolateColor(h);
        intersections[nb_bounds].dir = reflect(current_dir, intersections[nb_bounds].normal);
        // check if the bounded ray does not enter the matter
        if (dot(intersections[nb_bounds].normal, intersections[nb_bounds].dir)<=0) {
            break;
        }
        current_dir = vec4(intersections[nb_bounds].dir);
        nb_bounds ++;
    }
    float current_Fresnel = 1.0;
    // Backward color computing
    for (int s=nb_bounds-1; s>=0; s--) {
        // computing the direct light with shadow ray
        vec4 vertEye = normalize(origin - intersections[s].point_hit);
        hitinfo_t h_light;
        vec4 vertLight = normalize(intersections[s].point_hit - vec4(lightPosition, 1));
        bool only_ambiant = isIntersected(current_origin, -vertLight, h_light);
        vec4 directColor = phongModel(vertLight, intersections[s].normal, vertEye, intersections[s].color, lightIntensity, only_ambiant);
        // adding the direct light to the result
        result = current_Fresnel * directColor + (1 - current_Fresnel) * result;
        float cos_theta = dot(intersections[s].normal, intersections[s].dir);
        current_Fresnel *= F(cos_theta);
    }

    return result;
}

layout (local_size_x = 8, local_size_y = 8) in;

void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy) * pixelSize + ivec2(shift_x, shift_y);
    ivec2 size = imageSize(framebuffer);

    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }

    vec2 pos = pix / (size - vec2(0.5,0.5));

    // pos in [0,1]^2 Need it in [-1,1]^2:
    pos = (2 * pos - vec2(1.,1.));

    // Step 1: I need pixel coordinates.
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    // Step 2: ray direction:
    vec4 dir = normalize((mat_inverse * worldPos));
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));
    vec4 color = trace(eye, dir);

    for (int index = 0; index < take_indices; index++){
        ivec2 pix2set = ivec2(pix.x + int((indices_alternance[index]/3)), pix.y + int(indices_alternance[index]%3));
        imageStore(framebuffer, pix2set, color);
    }
}
